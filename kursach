#define _CRT_SECURE_NO_DEPRECATE

#include <png.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <limits.h>
#include <time.h>

typedef struct {
    uint8_t red;
    uint8_t green;
    uint8_t blue;
    uint8_t alpha;
} pixel_t;

typedef struct {
    pixel_t* pixels;
    size_t width;
    size_t height;
} bitmap_t;

const int DEFAULT_NUMBERS = 50;
int size = 1;
char* path = "";
int isPrintComplexity = 0;
clock_t start, stop;
double elapsed;

static pixel_t* pixel_at(bitmap_t* bitmap, int x, int y)
{
    return bitmap->pixels + bitmap->width * y + x;
}

static int save_png_to_file(bitmap_t* bitmap, const char* path)
{
    FILE* fp;
    png_structp png_ptr = NULL;
    png_infop info_ptr = NULL;
    size_t x, y;
    png_byte** row_pointers = NULL;

    int status = -1;

    int pixel_size = 4;
   /* int pixel_size = size;*/
    int depth = 8;

    fp = fopen(path, "wb");
    if (!fp) {
        goto fopen_failed;
    }

    png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
    if (png_ptr == NULL) {
        goto png_create_write_struct_failed;
    }

    info_ptr = png_create_info_struct(png_ptr);
    if (info_ptr == NULL) {
        goto png_create_info_struct_failed;
    }

    if (setjmp(png_jmpbuf(png_ptr))) {
        goto png_failure;
    }

    png_set_IHDR(
        png_ptr,
        info_ptr,
        bitmap->width,
        bitmap->height,
        depth,
        PNG_COLOR_TYPE_RGBA,
        PNG_INTERLACE_NONE,
        PNG_COMPRESSION_TYPE_DEFAULT,
        PNG_FILTER_TYPE_DEFAULT);

    row_pointers = png_malloc(png_ptr, bitmap->height * sizeof(png_byte*));

    for (y = 0; y < bitmap->height; ++y) {

        png_byte* row =
            png_malloc(png_ptr, sizeof(uint8_t) * bitmap->width * pixel_size);

        row_pointers[y] = row;

        for (x = 0; x < bitmap->width; ++x) {
            pixel_t* pixel = pixel_at(bitmap, x, y);
            *row++ = pixel->red;
            *row++ = pixel->green;
            *row++ = pixel->blue;
            *row++ = pixel->alpha;
        }
    }

    png_init_io(png_ptr, fp);
    png_set_rows(png_ptr, info_ptr, row_pointers);
    png_write_png(png_ptr, info_ptr, PNG_TRANSFORM_IDENTITY, NULL);

    status = 0;

    for (y = 0; y < bitmap->height; y++) {
        png_free(png_ptr, row_pointers[y]);
    }

    png_free(png_ptr, row_pointers);

png_failure:
png_create_info_struct_failed:
    png_destroy_write_struct(&png_ptr, &info_ptr);
png_create_write_struct_failed:
    fclose(fp);
fopen_failed:
    return status;
}

// Paint pixels with black with set X, Y coordinates
void set_pixel (bitmap_t* fruit, int x, int y, int r, int g, int b)
{
    y = y * size;
    x = x * size;

    // Paint columns with accordance received coordinates
    int s = x - 1;

    if (size > 1) {
        for (int p = x - size; p < x; p++) {
            
            for (int i = y - 1; i >= 0; i--) {

                for (int j = size; j >= 1; j--) {
                    
                    pixel_t* pixel = pixel_at(fruit, p, i);
                    pixel->red = r;
                    pixel->green = g;
                    pixel->blue = b;
                    pixel->alpha = 255;
                }

                if (i < y - size - 1) {
                    r = 180;
                    g = 180;
                    b = 180;
                }
                else {
                    r = 0;
                    g = 0;
                    b = 0;
                }
            }
        }
    }
    else{
        char isPointPainted = 0;

        for (int i = y - 1; i >= 0; i--) {

            pixel_t* pixel = pixel_at(fruit, s, i);
            pixel->red = r;
            pixel->green = g;
            pixel->blue = b;
            pixel->alpha = 255;

            if (isPointPainted = 0)
                isPointPainted = 1;

            if (isPointPainted = 1) {
                r = 180;
                g = 180;
                b = 180;
            }
        }
    }
}

void create_image(int* a, int n, int counter) 
{
    int nPictureSide = n * size;

    bitmap_t fruit;
    fruit.width = nPictureSide;
    fruit.height = nPictureSide;
    fruit.pixels = calloc(sizeof(pixel_t), fruit.width * fruit.height);

    // Paint a white square and paint each pixel with white
    for (int y = 0; y < fruit.height; y++) {
        for (int x = 0; x < fruit.width; x++) {
            pixel_t* pixel = pixel_at(&fruit, x, y);
            pixel->red = 255;
            pixel->green = 255;
            pixel->blue = 255;
            pixel->alpha = 255;
        }
    }

    // Paint set pixels with black
    for (int x = 0; x < n; x++) 
        set_pixel(&fruit, x + 1, a[x], 0, 0, 0);

    char fname[20];
    sprintf(fname, "frame%05d.png", counter);

    char *dist = malloc(sizeof(char) * (strlen(path) + 20));

    if (path != "") {
        sprintf(dist, "%s\\%s", path, fname);

        save_png_to_file(&fruit, dist);
    }
    else
        save_png_to_file(&fruit, fname);
}

// Print array 
void print(int* a, int n)
{
    int i;
    for (i = 0; i < n; i++)
        printf("%d%s", a[i], i == n - 1 ? "\n" : " ");
}

// Main sort method
void shell_sort (int* a, int n){
    int h, i, j, t;
    int counter = 0;
    int amount_of_comparison = 0;
    int amount_of_swap = 0;

    start = clock();

    for (h = n; h /= 2;) {
        amount_of_comparison++;

        for (i = h; i < n; i++) {
            t = a[i];

            amount_of_comparison++;
            for (j = i; j >= h && t < a[j - h]; j -= h) {
                amount_of_comparison++;

                create_image(a, n, ++counter);

                amount_of_swap++;

                a[j] = a[j - h];
            }

            a[j] = t;
            create_image(a, n, ++counter);
        }       
    }

    stop = clock();

    if (isPrintComplexity == 1) {
        char comparisons[999];
        char swaps[999];

        elapsed = ((double)(stop - start)) / CLOCKS_PER_SEC;

        sprintf(comparisons, "%d", amount_of_comparison);
        sprintf(swaps, "%d", amount_of_swap);
        printf("Amount of comparisons is %s\nAmount of swaps is %s\n", comparisons, swaps);
        printf("The Shellsorting algorithm used %.4lf seconds to perform sort\nfor %d elements", 
            elapsed, n);  // difftime(stop, start)
    }
}

// numbers - Allocation number of values to sort
int sort(int numbers)
{
    int* a;              // array pointer
    int i = 0;

    if (numbers <= 0) {
        puts("Error: Numbers should not be Zero.");
        return 0;
    }

    int memory_needed = numbers * sizeof(int);
    a = (int*)malloc(memory_needed);

    if (a == NULL) {
        puts("malloc did not return a value");
        free(a);
        return 0;
    }

    for (i = 0; i < numbers; i++)
        a[i] = numbers - i;

    int n = memory_needed / sizeof a[0];
    i;

    puts("Start sort");
    shell_sort(a, n);

    free(a); // Free the memory that was allocated for the array

    return 0;
}

int main(int argc, char* argv[])
{
    printf("%s\n", "Programm for Shell sort visualization");

    if (argc <= 1) {
        print_help_menu();
        return 0;
    }

    if (argc < 3) {
        if (argv[1] == "-h" || argv[1] == "--help") {
            print_help_menu();

            sort(DEFAULT_NUMBERS);

            return 0;
        }
        if (strcmp(argv[1], "-c") == 0 || strcmp(argv[1], "--complexity") == 0) {
            puts("Complexity");

            isPrintComplexity = 1;

            sort(DEFAULT_NUMBERS);

            isPrintComplexity = 0;
        }
        else {
            puts("Warning: You entered parameters without value. Please put value to the parameter.");
            print_help_menu();
        }
    }

    // If only one parameter has been received
    if (argc == 3) {

        puts("Parameters received:");

        // Number of values to sort
        if (strcmp(argv[1], "-n") == 0 || strcmp(argv[1], "--numbers") == 0) {
            puts("Number");
            int numbers = atoi(argv[2]);
            sort(numbers);
        }

        // Box size of each value (in pixel)
        if (strcmp(argv[1], "-s") == 0 || strcmp(argv[1], "--size") == 0) {
            puts("Size");
            size = atoi(argv[2]);
            sort(DEFAULT_NUMBERS);
        }

        // Path to directory for saving
        if (strcmp(argv[1], "-p") == 0 || strcmp(argv[1], "--path") == 0) {
            puts("Path");
            path = malloc(sizeof(char) * (strlen(argv[2]) + 1));
            
            if (path != 0) {
                strcpy(path, argv[2]);              

                sort(DEFAULT_NUMBERS);

                free(path);
            }
        }       
    }

    // If more than one parameters has been received
    if (argc > 3) {

        puts("Parameters received:");

        int numbers = DEFAULT_NUMBERS;

        // Goes throgh all array elemnts to get all parameters
        for (int i = 0; i < argc; i++) {

            // Number of values to sort
            if (strcmp(argv[i], "-n") == 0 || strcmp(argv[i], "--numbers") == 0) {
                puts("Number");
                numbers = atoi(argv[i + 1]);
            }

            // Box size of each value (in pixel)
            if (strcmp(argv[i], "-s") == 0 || strcmp(argv[i], "--size") == 0) {
                puts("Size");
                size = atoi(argv[i + 1]);
            }

            // Path to directory for saving
            if (strcmp(argv[i], "-p") == 0 || strcmp(argv[i], "--path") == 0) {
                puts("Path");
                path = malloc(sizeof(char) * (strlen(argv[i + 1]) + 1));

                if (path != 0) {
                    strcpy(path, argv[i + 1]);
                }
            }

            // Print complexity
            if (strcmp(argv[i], "-c") == 0 || strcmp(argv[i], "--complexity") == 0) {
                puts("Complexity");

                isPrintComplexity = 1;
            }
        }

        // Sort the array using all received parameters
        sort(numbers);

        isPrintComplexity = 0;

        if (path != NULL)
            free(path);
    }

    return 0;
}

int print_help_menu() {    
    puts("General options:");
    puts("    -n [--numbers]    Number of values to sort");
    puts("    -s [--size]       Box size of each value (in pixel)");
    puts("    -p [--path]       Path to directory for saving");
    puts("    -c [--complexity] Print number of swaps/comparisons");
}
